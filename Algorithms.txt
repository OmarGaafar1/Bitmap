### ALGORITHMS FOR THE FILTERS

## Filter 1: Black and White Image
check every pixel if it is greater than 127(grey) then make it 255(white)
if smaller than 127 make it black(0)



## Filter 2: Invert Image
change every pixel to equal = 255 - pixelvalue
if pixel value was white then the output is black
//	       was black then the output is white
//	       was grey then the output is grey 
etc.



## Filter 3: Merge Images




## Filter 4: Flip Image
interchange the first pixel with the last pixel till they reach
the middle row in the middle column




## Filter 5: Rotate Image
	if we considered a picture is a matrix 3x3 [ 1, 2, 3     if we want to rotate it 90 degree we need it to be in this form >> [ 7, 4,  1  
                                                     4, 5 ,6                                                                          8, 5 , 2              
                                                     7, 8 ,9 ]                                                                        9, 6 , 3]


pixel at [0][0] ,must be at [0][2].   pixel at [0][1], must be at [1][2] . pixel at [0][2] , must be at [2][2]

if we want to rotate it 180 or 270 we could repeat this process. Twice to get 180 degree , or three times to get 270 degree.

Applying the above algorithm on a 256 x 256 matrix.







## Filter 6: Darken and Lighten Image
in the darkening case, remove half of the value of the pixel with value = value - 0.5* value.
i.e. value = 200 -> value = 100

in the lightening case, add half of the value of the pixel with value = value + 0.5*(value + 1).
i.e.  value = 10 -> 15




## Filter 7: Detect Image Edges
uses the black and white filter then then if the next two colors are of the same color i.e pix1-pix2 = 0
pix1 becomes black. does the same vertically for the pixels.
else the pixel becomes white.



## Filter 8: Enlarge Image

We will seperate each quarter of the image in a seperate array[128][128] . Thus we have 4 arrays containg the 4 parts of the image.
Then the user enters which part he wants to enlarge. We will have then to display the [128][128]array on a 256x256 image.
To do so some pixels will remain unmatched , so we will have to do more iretations to fill the unfilled pixels.




## Filter 9: Shrink Image
First, we will have to get a 3x3 average for each pixel. Then we will need to display a 256x256 image in 128x128, 86x86 and 64x64 according to the user's input.
To do so , we will have to skip 2 pixels in case of 128x128 and skip 3 pixels in case of 86x86 and skip 4 pixels in case of 64x64.


## Filter a: Mirror Image
for 1/2 right: change the value of the (1st pixel) with the value of the (1st last pixel of the same row)
(2nd) pixel with (2nd last) pixel and so on, till we reach the middle column for each row.

for 1/2 left: change the value of the (1st last pixel) with the value of the (1st pixel of the same row)
(2nd last) pixel with the (2nd) pixel and so on, till we reach the middle column for each row.

for 1/2 up: change the value of the (1st last pixel) with the value of the (1st pixel of the same column)
(2nd last) pixel with the (2nd) pixel and so on, till we reach the middle row for each column.

for 1/2 down: change the value of the (1st pixel) with the value of the (1st last pixel of the same column)
(2nd) pixel with the (2nd last) pixel and so on, till we reach the middle row for each column.




## Filter b: Shuffle Image
We will seperate each quarter of the image in a seperate array[128][128] . Thus we have 4 arrays containg the 4 parts of the image.
According to the user's input , the image will be formed . If user enters (2 3 4 1), therefor the first quarter of the image will contain part_2 and second quarter of the image will contain part_3 and third quarter of the image will contain part_4, and fourth quarter of the image will contain part_1



## Filter c: Blur Image
        if we considered a picture is a matrix 3x3 [ 1, 2, 3    , To Blur the image we need to get for each pixel the average with its corrosponding pixels
                                                     4, 5 ,6                          
                                                     7, 8 ,9 ]                                                                


for pixel at [0][0] = 1 , we get the average with its adjacent pixels . Average_1 = (1+ 2+ 4 + 5) / 4
for pixel at [0][1] = 2 , we get the average with its adjacent pixels . Average_2 = 
for pixel at [0][2] = 1 , we get the average with its adjacent pixels . Average_3 = 
 

so for the blur image , its [0][0] will be equal to Average_1
so for the blur image , its [0][1] will be equal to Average_2
so for the blur image , its [0][2] will be equal to Average_3 
And so on .....

Apllying the above algorithm on a 256 x 256 matrix.























